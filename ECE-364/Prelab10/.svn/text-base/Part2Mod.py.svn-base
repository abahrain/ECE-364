#! /usr/bin/env python

import sys
import os
import math

class Point3D:
	def __init__(self, x=0.0, y=0.0, z=0.0):
		self.x = float(x)
                self.y = float(y)
                self.z = float(z)
		
	def distance_from(self, other):
		xsq = (self.x-other.x) * (self.x-other.x)
                ysq = (self.y-other.y) * (self.y-other.y)
                math.sqrt(xsq+ysq)

	def nearest_point(self, points):
            x=0
            for i in length(points):
                if points[i] < p:
                    p=points[i]
	    return p
	def clone(self):
		return p
		
	def __str__(self):
		self.x = str(self.x)
                self.y = str(self.y)
                self.z = str(self.z)
		return "(%.3f, %.3f, %.3f)" % (self.x, self.y, self.z)
				
class PointSet:
	def __init__(self):
		Points = PointSet
		
	def add_point(self, p):
		self.p= p
		
	def get_num_points(self):
		return length(Points)
		
	def compute_bounding_box(self):
	        v1 = self.x * (maxes[0] - mins[0])
                v2 = self.y * (maxes[1] - mins[1])
                v3 = self.z * (maxes[2] - mins[2])
                a=(v1,v2,v3)
		return a
	def compute_nearest_neighbors(self, other_point_set):
		distance = (self.x-other_point_set.x) * (self.x-other_point_set.x) + (self.y-other_point_set.y) * (self.y-other_point_set.y)
			
	
				
